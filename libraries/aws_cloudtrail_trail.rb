class AwsCloudTrailTrail < Inspec.resource(1)
  name 'aws_cloudtrail_trail'
  desc 'Verifies individual AWS CloudTrail Trails'

  example "
    describe aws_cloudtrail_trail('Default') do
      its('s3_bucket_name') { should eq 'mycorp-cloudtrail' }
    end

    describe aws_cloudtrail do
      it { should exist }
    end
  "

  include AwsResourceMixin
  attr_reader :trail_name, :kms_key_id, :log_group_name, :s3_bucket_name
  attr_reader :is_multi_region, :is_log_file_validation_enabled, :is_encrypted
  alias be_multi_region? is_multi_region
  alias be_encrypted? is_encrypted
  alias has_log_file_validation_enabled? is_log_file_validation_enabled
  # have_log_file_validation_enabled? will be generated by RSpec

  def to_s
    "CloudTrail Trail #{trail_name}"
  end

  private

  def validate_params(raw_params)
    validated_params = check_resource_param_names(
      raw_params: raw_params,
      allowed_params: [:trail_name],
      allowed_scalar_name: :trail_name,
      allowed_scalar_type: String,
    )

    # If no name was provided, assume 'Default'.
    validated_params[:trail_name] ||= 'Default'
    validated_params
  end

  def fetch_from_aws
    backend = BackendFactory.create
    trails = backend.describe_trails(trail_name_list: [trail_name]).trail_list
    if trails.empty?
      @exists = false
      return
    end
    @exists = true

    # Simple properties
    @kms_key_id     = trails[0].kms_key_id
    @log_group_name = trails[0].log_group_name
    @s3_bucket_name = trails[0].s3_bucket_name

    # These instance variables directly drive matchers, which are predicate aliases.
    @is_multi_region = trails[0].is_multi_region_trail
    @is_log_file_validation_enabled = trails[0].log_file_validation_enabled

    # These are synthetics.
    @is_encrypted = !(kms_key_id.nil? || kms_key_id.empty?)
  end

  class Backend
    class AwsClientApi
      BackendFactory.set_default_backend(self)
      def describe_trails(criteria)
        AWSConnection.new.cloudtrail_client.describe_trails(criteria)
      end
    end
  end
end
